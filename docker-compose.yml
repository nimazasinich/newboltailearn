version: '3.8'

# NewBolt AI Learn - Persian Legal AI System
# Docker Compose configuration for multi-service deployment

services:
  # ===== Backend Service =====
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: newboltailearn-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - DB_PATH=/app/data/persian_legal_ai.db
      - DATASET_DIRECTORY=/app/datasets
      - MODEL_DIRECTORY=/app/models
      - CHECKPOINT_DIRECTORY=/app/checkpoints
      - EXPORT_DIRECTORY=/app/exports
      - LOGS_DIRECTORY=/app/logs
      - SERVE_FRONTEND=false
      - HF_TOKEN_B64=${HF_TOKEN_B64:-}
      - HF_TOKEN_ENC=${HF_TOKEN_ENC:-}
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-default-session-secret-change-in-production}
      - CSRF_SECRET=${CSRF_SECRET:-default-csrf-secret-change-in-production}
      - ENABLE_HF_STARTUP_CHECK=${ENABLE_HF_STARTUP_CHECK:-false}
      - TF_CPP_MIN_LOG_LEVEL=2
    volumes:
      - ./data:/app/data
      - ./datasets:/app/datasets
      - ./models:/app/models
      - ./checkpoints:/app/checkpoints
      - ./exports:/app/exports
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - newboltailearn-network
    labels:
      - "app=newboltailearn"
      - "component=backend"

  # ===== Frontend Service =====
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    container_name: newboltailearn-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - newboltailearn-network
    labels:
      - "app=newboltailearn"
      - "component=frontend"

  # ===== Development Service (Alternative to backend for development) =====
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: newboltailearn-dev
    ports:
      - "3000:3000"
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - SERVE_FRONTEND=true
      - DB_PATH=/app/data/persian_legal_ai.db
      - JWT_SECRET=dev-jwt-secret-not-secure
      - SESSION_SECRET=dev-session-secret-not-secure
      - CSRF_SECRET=dev-csrf-secret-not-secure
    volumes:
      - .:/app
      - /app/node_modules
      - ./data:/app/data
      - ./datasets:/app/datasets
      - ./models:/app/models
      - ./checkpoints:/app/checkpoints
      - ./exports:/app/exports
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - newboltailearn-network
    profiles:
      - development
    labels:
      - "app=newboltailearn"
      - "component=development"

  # ===== Redis Cache Service (Optional) =====
  redis:
    image: redis:7-alpine
    container_name: newboltailearn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - newboltailearn-network
    profiles:
      - cache
    labels:
      - "app=newboltailearn"
      - "component=cache"

  # ===== Nginx Reverse Proxy (Production) =====
  nginx:
    image: nginx:alpine
    container_name: newboltailearn-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - newboltailearn-network
    profiles:
      - production
    labels:
      - "app=newboltailearn"
      - "component=proxy"

  # ===== Database Backup Service (Optional) =====
  db-backup:
    image: alpine:latest
    container_name: newboltailearn-backup
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    command: >
      sh -c "
        apk add --no-cache sqlite dcron &&
        echo '${BACKUP_SCHEDULE:-0 2 * * *} cp /data/persian_legal_ai.db /backups/persian_legal_ai_$(date +%Y%m%d_%H%M%S).db && find /backups -name \"*.db\" -mtime +7 -delete' | crontab - &&
        crond -f
      "
    restart: unless-stopped
    networks:
      - newboltailearn-network
    profiles:
      - backup
    labels:
      - "app=newboltailearn"
      - "component=backup"

# ===== Volumes =====
volumes:
  redis_data:
    driver: local
    labels:
      - "app=newboltailearn"

# ===== Networks =====
networks:
  newboltailearn-network:
    driver: bridge
    labels:
      - "app=newboltailearn"