var r=Object.defineProperty;var l=(c,e,t)=>e in c?r(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t;var s=(c,e,t)=>l(c,typeof e!="symbol"?e+"":e,t);import{e as h}from"./index-C8gKYOKK.js";class a{constructor(e){s(this,"ws",null);s(this,"url");s(this,"listeners",new Map);s(this,"reconnectAttempts",0);s(this,"maxReconnectAttempts",5);s(this,"reconnectDelays",[1e3,2e3,5e3,1e4,1e4]);s(this,"reconnectTimer",null);s(this,"isConnecting",!1);s(this,"shouldReconnect",!0);this.url=e||h}connect(){return this.isConnecting||this.ws&&this.ws.readyState===WebSocket.OPEN?Promise.resolve():(this.isConnecting=!0,this.shouldReconnect=!0,new Promise((e,t)=>{try{this.ws=new WebSocket(this.url),this.ws.onopen=()=>{console.log("[WS] Connected to WebSocket server"),this.isConnecting=!1,this.reconnectAttempts=0,this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),e()},this.ws.onmessage=n=>{try{const o=JSON.parse(n.data);this.emit(o.type,o)}catch(o){console.error("[WS] Failed to parse message:",o)}},this.ws.onerror=n=>{console.error("[WS] WebSocket error:",n),this.isConnecting=!1,this.reconnectAttempts===0&&t(new Error("Failed to connect to WebSocket server"))},this.ws.onclose=n=>{console.log(`[WS] Connection closed: ${n.code} ${n.reason}`),this.isConnecting=!1,this.ws=null,this.shouldReconnect&&this.reconnectAttempts<this.maxReconnectAttempts&&this.scheduleReconnect()}}catch(n){this.isConnecting=!1,t(n)}}))}scheduleReconnect(){this.reconnectTimer&&clearTimeout(this.reconnectTimer);const e=this.reconnectDelays[Math.min(this.reconnectAttempts,this.reconnectDelays.length-1)];console.log(`[WS] Scheduling reconnect in ${e}ms (attempt ${this.reconnectAttempts+1}/${this.maxReconnectAttempts})`),this.reconnectTimer=setTimeout(()=>{this.reconnectAttempts++,this.connect().catch(t=>{console.error("[WS] Reconnect failed:",t)})},e)}disconnect(){this.shouldReconnect=!1,this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.ws&&(this.ws.close(1e3,"Client disconnect"),this.ws=null)}on(e,t){this.listeners.has(e)||this.listeners.set(e,new Set),this.listeners.get(e).add(t)}off(e,t){const n=this.listeners.get(e);n&&(n.delete(t),n.size===0&&this.listeners.delete(e))}emit(e,t){const n=this.listeners.get(e);n&&n.forEach(o=>{try{o(t)}catch(i){console.error(`[WS] Error in event listener for ${e}:`,i)}})}get isConnected(){var e;return((e=this.ws)==null?void 0:e.readyState)===WebSocket.OPEN}get connectionState(){if(!this.ws)return"disconnected";switch(this.ws.readyState){case WebSocket.CONNECTING:return"connecting";case WebSocket.OPEN:return"connected";case WebSocket.CLOSING:return"closing";case WebSocket.CLOSED:return"closed";default:return"unknown"}}}const m=new a;m.connect().catch(c=>{console.warn("[WS] Initial connection failed, will retry:",c.message)});export{m as w};
//# sourceMappingURL=wsClient-BvJiXHHm.js.map
